% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recover.R
\name{fhir_create_resource}
\alias{fhir_create_resource}
\title{Create single FHIR resource from data.frame/data.table}
\usage{
fhir_create_resource(resourceType, data, brackets)
}
\arguments{
\item{resourceType}{A string naming the resource Type of the FHIR resource, e.g. "Patient".}

\item{data}{A data.frame or data.table containing one ore more rows with information on the
FHIR resource. Ideally, this should have been produced by \code{\link[=fhir_crack]{fhir_crack()}} with the \code{cols}
element of the design omitted in combination with \code{\link[=fhir_melt_all]{fhir_melt_all()}} with
\code{rm_indices=FALSE}. If you wish to manipulate you data before remodeling the FHIR resource
you can store the indices using \code{\link[=fhir_extract_indices]{fhir_extract_indices()}}, remove them temporarily
with \code{\link[=fhir_rm_indices]{fhir_rm_indices()}} and restore them again with \code{\link[=fhir_restore_indices]{fhir_restore_indices()}}
before the use of \code{fhir_create_resource}.}

\item{brackets}{A character vector of length two specifying the brackets that surround the indices,
should match the brackets used in \code{\link[=fhir_crack]{fhir_crack()}}.}
}
\value{
An xml object containing a single FHIR resource of Type \code{resourceType}. This can
be saved using \code{\link[xml2:write_xml]{xml2::write_xml()}}.
}
\description{
This function takes a data.frame with 1 or more rows containing information for a single
FHIR resource and builds the FHIR resource as a xml-object.
When there are multiple entries to some of the elements of the resource, the input data
should be rows from a molten data.frame as produced by \code{\link[=fhir_melt_all]{fhir_melt_all()}} with
\code{rm_indices=FALSE}. When there are no multiple entries, the data still must contain
indices as produced by \code{\link[=fhir_crack]{fhir_crack()}} when brackets are provided in the design.
}
\details{
The column names of the input data must reflect the path to the corresponding resource element
with {.} as a seperator, e.g. \code{code.coding.system}. These names are produced automatically
by \code{\link[=fhir_crack]{fhir_crack()}} when the \code{cols} element of the design is omitted.
}
\examples{
#generate example
bundle <- xml2::read_xml(
	"<Bundle>
		<Patient>
			<id value='id3.1'/>
			<id value='id3.2'/>
			<address>
				<use value='home'/>
				<city value='Berlin'/>
			</address>
			<address>
				<type value='postal'/>
				<country value='France'/>
			</address>
			<address>
				<use value='work'/>
				<city value='London'/>
				<type value='postal'/>
				<country value='England'/>
			</address>
			<birthDate value='1974-12-25'/>
		</Patient>
	</Bundle>"
)

#crack bundle
design <- list(Patient = list(
                             resource = "//Patient",
                             style = list(brackets = c("[", "]"),
                                          sep="||")))

dfs <- fhir_crack(list(bundle), design)

#melt multiple entries
d <- fhir_melt_all(dfs$Patient, sep="||", brackets = c("[", "]"),
                   rm_indices = FALSE)

#create resource
resource <- fhir_create_resource(resourceType = "Patient",
                                 data = d, brackets = c("[", "]"))

#save/inspect resource
library(xml2)
tmp <- tempfile(fileext = ".xml")
write_xml(resource, tmp)
readLines(tmp)

}
