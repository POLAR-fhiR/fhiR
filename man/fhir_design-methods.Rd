% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fhir_design.R, R/fhir_table_list.R
\docType{methods}
\name{fhir_design}
\alias{fhir_design}
\alias{fhir_design,fhir_table_description-method}
\alias{fhir_design,list-method}
\alias{fhir_design,fhir_table_list-method}
\title{Create a \linkS4class{fhir_design} object}
\usage{
fhir_design(..., names)

\S4method{fhir_design}{fhir_table_description}(..., names)

\S4method{fhir_design}{list}(..., names)

\S4method{fhir_design}{fhir_table_list}(..., names)
}
\arguments{
\item{...}{One ore more \code{fhir_table_description} objects or a named list containing
\code{fhir_table_description} objects, or an object of class \linkS4class{fhir_df_list}/\linkS4class{fhir_dt_list}.
See \code{\link[=fhir_table_description]{fhir_table_description()}}.}

\item{names}{Optional. The names of the table_descriptions. If no names are provided, the names of the object(s) that
were used in creating the design are taken as the names.}
}
\description{
A \code{fhir_design} is a named list of \code{fhir_table_description} objects (See \code{\link[=fhir_table_description]{fhir_table_description()}})
and should be created using the function described here. The design is used in \code{\link[=fhir_crack]{fhir_crack()}} to tell
the function how to flatten each resource type.
}
\details{
For backwards compatibility it is for the moment also possible to build it from an
old-style design as used in \verb{fhircrackr (< 1.0.0)}. See examples.

If this function is given an object of class \linkS4class{fhir_df_list} or \linkS4class{fhir_dt_list}, it will
extract the design that was used to create the respective list.

A \code{fhir_design} looks for example like this:\preformatted{A fhir_design with 2 table_descriptions:
=====================================================
Name: Patients

Resource type: Patient

Columns:
column name | xpath expression
------------------------
name        | name/family
gender      | gender
id          | id

Style:
sep: ||
brackets: '[' ']'
rm_empty_cols: FALSE
=====================================================
Name: Observations

Resource type: MedicationAdministration

Columns:
An empty fhir_columns object

Style:
sep: ' '
brackets: character(0)
rm_empty_cols: TRUE
}

See the examples for how to create this design.
}
\examples{

####Example 1####

###create fhir_table_descriptions

#most explicit, long form
pat <- fhir_table_description(resource = "Patient",
                    cols = c(name = "name/family",
                             gender = "gender",
                             id = "id"),
                    style = fhir_style(sep = "||",
                                       brackets = c("[", "]"),
                                       rm_empty_cols = FALSE
                            )
             )
 print(pat)

#most reduced form:
#All columns are extracted, default style is assumed
meds <- fhir_table_description(resource = "MedicationAdministration")
print(meds)

#create design
#First option: explicitly define names
design1 <- fhir_design(pat, meds, names = c("Patients", "Medications"))
print(design1)

#Second option: Names are taken from the table_descriptions
design2 <- fhir_design(pat, meds)
print(design2)

#don't do this, because names will be weird:
design2a <- fhir_design(fhir_table_description(resource = "MedicationAdministration"))
print(design2a)

#Third option: named list
design3 <- fhir_design(list(Patients = pat, Medications = meds))
print(design3)


####Example 2####
#This option will be deprecated at some point

#old style design
old_design <- list(
                 Patients = list(
                    resource = "//Patient",
                    cols = list(
                       name = "name/family",
                       gender = "gender",
                       id = "id"),
                    style = list(
                       sep = "||",
                       brackets = c("[", "]"),
                       rm_empty_cols = FALSE
                    )
                 ),
                 Medications = list(
                    resource = "//Medication"
                 )
              )

new_design <- fhir_design(old_design)
print(new_design)

###Example 3###
###Extract design from fhir_df_list/fhir_dt_list

#unserialize and crack example bundles
med_bundles <- fhir_unserialize(medication_bundles)
dfs <- fhir_crack(med_bundles, design = design1)

#extract design
fhir_design(dfs)

}
\seealso{
\code{\link[=fhir_table_description]{fhir_table_description()}}, \code{\link[=fhir_crack]{fhir_crack()}}
}
