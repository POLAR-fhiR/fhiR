% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_resources.R
\name{fhir_create_bundle}
\alias{fhir_create_bundle}
\title{Create transaction/batch bundle with FHIR resources to post on a FHIR server}
\usage{
fhir_create_bundle(
  resourceType,
  data,
  brackets,
  bundleType = "transaction",
  requestMethod = "PUT"
)
}
\arguments{
\item{resourceType}{A string naming the resource Type of the FHIR resources, e.g. "Patient".}

\item{data}{A data.frame or data.table containing information on the
FHIR resources. Ideally, this should have been produced by \code{\link[=fhir_crack]{fhir_crack()}} with the \code{cols}
element of the design omitted in combination with \code{\link[=fhir_melt_all]{fhir_melt_all()}} with
\code{rm_indices=FALSE}. If you wish to manipulate you data before remodeling the FHIR resource
you can store the indices using \code{\link[=fhir_extract_indices]{fhir_extract_indices()}}, remove them temporarily
with \code{\link[=fhir_rm_indices]{fhir_rm_indices()}} and restore them again with \code{\link[=fhir_restore_indices]{fhir_restore_indices()}}
before the use of \code{fhir_create_bundle}.}

\item{brackets}{A character vector of length two specifying the brackets that surround the indices,
should match the brackets used in \code{\link[=fhir_crack]{fhir_crack()}}.}

\item{bundleType}{A string defining the bundle type, should be either \code{"transaction"} or \code{"batch"}.
See \url{https://www.hl7.org/fhir/http.html#transaction} for an explanation of the two.}

\item{requestMethod}{A string defining the request Method that will be applied to every individual resource.
Should be either \code{"PUT"}, resulting in an \emph{update}, \url{https://www.hl7.org/fhir/http.html#update}
or \code{"POST"}, resulting in a \emph{create}, \url{https://www.hl7.org/fhir/http.html#create}.}
}
\value{
An xml object containing a transaction/batch bundle. This can be saved using \code{\link[xml2:write_xml]{xml2::write_xml()}}
and be posted to the FHIR server outside of R or inside of R using \code{\link[httr:POST]{httr::POST()}}.
}
\description{
This function takes a data.frame/data.table containing information for several
FHIR resources of the same resource type and builds a transaction bundle of the
FHIR resources as a xml-object.
}
\details{
When there are multiple entries to some of the elements of the resource, the input data
should be rows from a molten data.frame as produced by \code{\link[=fhir_melt_all]{fhir_melt_all()}} with
\code{rm_indices=FALSE}. When there are no multiple entries, the data still must contain
indices as produced by \code{\link[=fhir_crack]{fhir_crack()}} when brackets are provided in the design.

The column names of the input data must reflect the path to the corresponding resource element
with {.} as a separator, e.g. \code{code.coding.system}. These names are produced automatically
by \code{\link[=fhir_crack]{fhir_crack()}} when the \code{cols} element of the design is omitted.
}
\examples{
#unserialize example bundles
bundles <- fhir_unserialize(patient_bundles)

#crack example bundles
design <- list(Patient = list(
                             resource = "//Patient",
                             style = list(brackets = c("[", "]"),
                                          sep="||")))

dfs <- fhir_crack(bundles, design)

#melt multiple entries
d <- fhir_melt_all(dfs$Patient, sep="||", brackets = c("[", "]"),
                   rm_indices = FALSE)

#create bundle
result <- fhir_create_bundle(resourceType = "Patient", data = d, brackets = c("[", "]"))

#save bundle
library(xml2)
tmp <- tempfile(fileext = ".xml")
write_xml(result, tmp)

\donttest{
#post bundle
library(httr)
POST(url = "http://fhir.hl7.de:8080/baseDstu3", body = upload_file(tmp))
}
}
